--- apps/app_queue.c	2011-05-26 11:31:31.000000000 -0500
+++ appts/app_queue.c	2011-05-26 11:29:37.000000000 -0500
@@ -2296,7 +2296,7 @@
  * \param[in] caller_disconnect if the 'H' option is used when calling Queue(), this is used to detect if the caller pressed * to disconnect the call
  * \param[in] forwardsallowed used to detect if we should allow call forwarding, based on the 'i' option to Queue()
  */
-static struct callattempt *wait_for_answer(struct queue_ent *qe, struct callattempt *outgoing, int *to, char *digit, int prebusies, int caller_disconnect, int forwardsallowed)
+static struct callattempt *wait_for_answer(struct queue_ent *qe, struct callattempt *outgoing, int *to, char *digit, int prebusies, int caller_disconnect, int forwardsallowed, time_t *endattemps)
 {
 	char *queue = qe->parent->name;
 	struct callattempt *o, *start = NULL, *prev = NULL;
@@ -2447,6 +2447,7 @@
 								ast_verbose( VERBOSE_PREFIX_3 "%s is busy\n", o->chan->name);
 							if (in->cdr)
 								ast_cdr_busy(in->cdr);
+							time(endattemps);
 							endtime = (long)time(NULL);
 							endtime -= starttime;
 							rna(endtime * 1000, qe, on, membername, 0, o->chan->hangupcause);
@@ -2463,6 +2464,7 @@
 								ast_verbose( VERBOSE_PREFIX_3 "%s is circuit-busy\n", o->chan->name);
 							if (in->cdr)
 								ast_cdr_busy(in->cdr);
+							time(endattemps);
 							endtime = (long)time(NULL);
 							endtime -= starttime;
 							rna(endtime * 1000, qe, on, membername, 0, o->chan->hangupcause);
@@ -2493,6 +2495,7 @@
 					}
 					ast_frfree(f);
 				} else {
+					time(endattemps);
 					endtime = (long) time(NULL) - starttime;
 					rna(endtime * 1000, qe, on, membername, 1, o->chan->hangupcause);
 					do_hang(o);
@@ -2532,6 +2535,7 @@
 		}
 		if (!*to) {
 			for (o = start; o; o = o->call_next)
 				rna(orig, qe, o->interface, o->member->membername, 1, AST_CAUSE_NOANSWER);
+ 			time(endattemps);
 		}
 	}
@@ -2980,6 +2984,8 @@
 	struct ast_datastore *datastore, *transfer_ds;
 	struct queue_end_bridge *queue_end_bridge = NULL;
 
+	time_t endattemps;
+
 	ast_channel_lock(qe->chan);
 	datastore = ast_channel_datastore_find(qe->chan, &dialed_interface_info, NULL);
 	ast_channel_unlock(qe->chan);
@@ -3149,7 +3155,9 @@
 	ring_one(qe, outgoing, &numbusies);
 	if (use_weight)
 		AST_LIST_UNLOCK(&queues);
-	lpeer = wait_for_answer(qe, outgoing, &to, &digit, numbusies, ast_test_flag(&(bridge_config.features_caller), AST_FEATURE_DISCONNECT), forwardsallowed);
+	time(&endattemps);
+	lpeer = wait_for_answer(qe, outgoing, &to, &digit, numbusies, ast_test_flag(&(bridge_config.features_caller), AST_FEATURE_DISCONNECT), forwardsallowed, &endattemps);
+	endattemps = (long)time(NULL) - endattemps;
 	/* The ast_channel_datastore_remove() function could fail here if the
 	 * datastore was moved to another channel during a masquerade. If this is
 	 * the case, don't free the datastore here because later, when the channel
@@ -3231,7 +3239,7 @@
 			if (peer->_softhangup) {
 				/* Agent must have hung up */
 				ast_log(LOG_WARNING, "Agent on %s hungup on the customer.\n", peer->name);
-				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "AGENTDUMP", "%s", "");
+				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "AGENTDUMP", "%ld", endattemps);
 				if (qe->parent->eventwhencalled)
 					manager_event(EVENT_FLAG_AGENT, "AgentDump",
 							"Queue: %s\r\n"
@@ -3248,7 +3256,7 @@
 			} else if (res2) {
 				/* Caller must have hung up just before being connected*/
 				ast_log(LOG_NOTICE, "Caller was about to talk to agent on %s but the caller hungup.\n", peer->name);
-				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "ABANDON", "%d|%d|%ld", qe->pos, qe->opos, (long)time(NULL) - qe->start);
+				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "ABANDON", "%d|%d|%ld|%ld", qe->pos, qe->opos, (long)time(NULL) - qe->start, endattemps);
 				record_abandoned(qe);
 				ast_hangup(peer);
 				ao2_ref(member, -1);
@@ -3263,7 +3271,7 @@
 		/* Make sure channels are compatible */
 		res = ast_channel_make_compatible(qe->chan, peer);
 		if (res < 0) {
-			ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "SYSCOMPAT", "%s", "");
+		    ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "SYSCOMPAT", "%ld", endattemps);
 			ast_log(LOG_WARNING, "Had to drop call because I couldn't make %s compatible with %s\n", qe->chan->name, peer->name);
 			record_abandoned(qe);
 			ast_hangup(peer);
@@ -3386,7 +3394,7 @@
 				ast_log(LOG_WARNING, "Asked to execute an AGI on this channel, but could not find application (agi)!\n");
 		}
 		qe->handled++;
-		ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "CONNECT", "%ld|%s", (long)time(NULL) - qe->start, peer->uniqueid);
+		ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "CONNECT", "%ld|%s|%ld", (long)time(NULL) - qe->start, peer->uniqueid, endattemps);
 		if (qe->parent->eventwhencalled)
 			manager_event(EVENT_FLAG_AGENT, "AgentConnect",
 					"Queue: %s\r\n"
@@ -4342,8 +4350,7 @@
 				if (!qe.handled) {
 					record_abandoned(&qe);
 					ast_queue_log(args.queuename, chan->uniqueid, "NONE", "ABANDON",
-						"%d|%d|%ld", qe.pos, qe.opos,
-						(long) time(NULL) - qe.start);
+						"%d|%d|%ld|%s", qe.pos, qe.opos, (long) time(NULL) - qe.start, "NONE");
 				}
 				res = -1;
 			} else if (qe.valid_digits) {
