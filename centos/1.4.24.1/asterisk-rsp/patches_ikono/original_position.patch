--- apps/app_queue.c	2010-10-26 17:02:14.000000000 -0500
+++ apps/app_queue.c	2010-10-26 16:57:28.000000000 -0500
@@ -2859,9 +2859,9 @@
 	int callcompletedinsl = qtds->callcompletedinsl;
 	struct ast_datastore *datastore;
 
-	ast_queue_log(qe->parent->name, qe->chan->uniqueid, member->membername, "TRANSFER", "%s|%s|%ld|%ld|%d",
+	ast_queue_log(qe->parent->name, qe->chan->uniqueid, member->membername, "TRANSFER", "%s|%s|%ld|%ld|%d|%d",
 				new_chan->exten, new_chan->context, (long) (callstart - qe->start),
-				(long) (time(NULL) - callstart), qe->opos);
+				(long) (time(NULL) - callstart), qe->opos, qe->pos);
 
 	update_queue(qe->parent, member, callcompletedinsl);
 	
@@ -3267,7 +3267,7 @@
 		/* Make sure channels are compatible */
 		res = ast_channel_make_compatible(qe->chan, peer);
 		if (res < 0) {
-		    ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "SYSCOMPAT", "%ld", endattemps);
+		    ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "SYSCOMPAT", "%ld|%d|%d", endattemps, qe->pos, qe->opos);
 			ast_log(LOG_WARNING, "Had to drop call because I couldn't make %s compatible with %s\n", qe->chan->name, peer->name);
 			record_abandoned(qe);
 			ast_hangup(peer);
@@ -3432,12 +3432,12 @@
 		if (!attended_transfer_occurred(qe->chan)) {
 			struct ast_datastore *tds;
 			if (strcasecmp(oldcontext, qe->chan->context) || strcasecmp(oldexten, qe->chan->exten)) {
-				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "TRANSFER", "%s|%s|%ld|%ld|%d",
+				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "TRANSFER", "%s|%s|%ld|%ld|%d|%d",
 					qe->chan->exten, qe->chan->context, (long) (callstart - qe->start),
-					(long) (time(NULL) - callstart), qe->opos);
+					(long) (time(NULL) - callstart), qe->opos, qe->pos);
 			} else if (qe->chan->_softhangup) {
-				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "COMPLETECALLER", "%ld|%ld|%d",
-					(long) (callstart - qe->start), (long) (time(NULL) - callstart), qe->opos);
+				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "COMPLETECALLER", "%ld|%ld|%d|%d",
+					(long) (callstart - qe->start), (long) (time(NULL) - callstart), qe->opos, qe->pos);
 				if (qe->parent->eventwhencalled)
 					manager_event(EVENT_FLAG_AGENT, "AgentComplete",
 							"Queue: %s\r\n"
@@ -3453,8 +3453,8 @@
 							(long)(callstart - qe->start), (long)(time(NULL) - callstart),
 							qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");
 			} else {
-				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "COMPLETEAGENT", "%ld|%ld|%d",
-					(long) (callstart - qe->start), (long) (time(NULL) - callstart), qe->opos);
+				ast_queue_log(queuename, qe->chan->uniqueid, member->membername, "COMPLETEAGENT", "%ld|%ld|%d|%d",
+					(long) (callstart - qe->start), (long) (time(NULL) - callstart), qe->opos, qe->pos);
 				if (qe->parent->eventwhencalled)
 					manager_event(EVENT_FLAG_AGENT, "AgentComplete",
 							"Queue: %s\r\n"
@@ -4241,7 +4241,7 @@
 				record_abandoned(&qe);
 				reason = QUEUE_TIMEOUT;
 				res = 0;
-				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld", qe.pos,(long) (time(NULL) - qe.start));
+				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld|%d", qe.pos,(long) (time(NULL) - qe.start), qe.opos);
 				break;
 			}
 
@@ -4259,7 +4259,7 @@
 				record_abandoned(&qe);
 				reason = QUEUE_TIMEOUT;
 				res = 0;
-				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld", qe.pos,(long) (time(NULL) - qe.start));
+				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld|%d", qe.pos,(long) (time(NULL) - qe.start), qe.opos);
 				break;
 			}
 			/* Make a periodic announcement, if enabled */
@@ -4272,7 +4272,7 @@
 				record_abandoned(&qe);
 				reason = QUEUE_TIMEOUT;
 				res = 0;
-				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld", qe.pos,(long) (time(NULL) - qe.start));
+				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld|%d", qe.pos,(long) (time(NULL) - qe.start), qe.opos);
 				break;
 			}
 			/* Try calling all queue members for 'timeout' seconds */
@@ -4286,7 +4286,7 @@
 			if (noption && tries >= qe.parent->membercount) {
 				if (option_verbose > 2)
 					ast_verbose(VERBOSE_PREFIX_3 "Exiting on time-out cycle\n");
-				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld", qe.pos,(long) (time(NULL) - qe.start));
+				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld|%d", qe.pos,(long) (time(NULL) - qe.start), qe.opos);
 				record_abandoned(&qe);
 				reason = QUEUE_TIMEOUT;
 				res = 0;
@@ -4316,7 +4316,7 @@
 				record_abandoned(&qe);
 				reason = QUEUE_TIMEOUT;
 				res = 0;
-				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld", qe.pos,(long) (time(NULL) - qe.start));
+				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHTIMEOUT", "%d|%ld|%d", qe.pos,(long) (time(NULL) - qe.start), qe.opos);
 				break;
 			}
 
@@ -4352,7 +4352,7 @@
 				res = -1;
 			} else if (qe.valid_digits) {
 				ast_queue_log(args.queuename, chan->uniqueid, "NONE", "EXITWITHKEY",
-					"%s|%d", qe.digits, qe.pos);
+					"%s|%d|%d", qe.digits, qe.pos, qe.opos);
 			}
 		}
 
